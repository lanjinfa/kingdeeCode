import clr
clr.AddReference("System")
clr.AddReference("Kingdee.BOS")
clr.AddReference("Kingdee.BOS.Core")
clr.AddReference("Kingdee.BOS.DataEntity")
clr.AddReference("Kingdee.BOS.App")
clr.AddReference("Kingdee.BOS.Contracts")
clr.AddReference("Kingdee.BOS.ServiceHelper")
from Kingdee.BOS import*
from Kingdee.BOS.Contracts import*
from Kingdee.BOS.Contracts.Report import*
from Kingdee.BOS.Core import *
from Kingdee.BOS.Core.Metadata import *
from Kingdee.BOS.Core.Report import*
from Kingdee.BOS.Core.SqlBuilder import*
from Kingdee.BOS.Core.Enums import * 
from Kingdee.BOS.App.Data import*
from Kingdee.BOS.Orm.DataEntity import*
from System import*
from System.ComponentModel import*
from System.Collections.Generic import*
from System.Text import*
from System.Threading.Tasks import*
from Kingdee.BOS.ServiceHelper import *
#初始化，在此事件中设置报表的属性全局参数
def Initialize():
	this.ReportProperty.ReportType=ReportType.REPORTTYPE_NORMAL;
	this.IsCreateTempTableByPlugin=True;
	this.ReportProperty.IsGroupSummary=True;
	#IsUIDesignerColumns=False,表示报表的列通过插件控制,后续在GetReportHeaders中构建列头
	this.ReportProperty.IsUIDesignerColumns=False;
	#数值字段精度控制
	decimalControlFieldList = List[DecimalControlField]();
	field1 = DecimalControlField();
	field1.ByDecimalControlFieldName = "FMUSTQTY";
	field1.DecimalControlFieldName = "FPRECISION";
	decimalControlFieldList.Add(field1);
	field4 = DecimalControlField();
	field4.ByDecimalControlFieldName = "FREALQTY";
	field4.DecimalControlFieldName = "FPRECISION";
	decimalControlFieldList.Add(field4);
	field5 = DecimalControlField();
	field5.ByDecimalControlFieldName = "unInstockQty";
	field5.DecimalControlFieldName = "FPRECISION";
	decimalControlFieldList.Add(field5);
	field6 = DecimalControlField();
	field6.ByDecimalControlFieldName = "invertoryQty";
	field6.DecimalControlFieldName = "FPRECISION";
	decimalControlFieldList.Add(field6);
	this.ReportProperty.DecimalControlFieldList = decimalControlFieldList;

#创建临时报表,正式进入账表取数sql拼接并取数，把账表取数结果放到创建的临时表中
#rptfilter:账表参数，可以从这里获取过滤条件等
#tableName:系统自动创建的账表临时表名，具备唯一性，最终报表页面展示的数据绑定此临时表，所以最终的报表结果数据要写入此临时表中
def BuilderReportSqlAndTempTable(rptfilter,tableName):
	#filterStr=filter.FilterParameter.FilterString;#过滤框条件页签过滤表达式
	#过滤框快捷过滤页签的实体数据包，从这里面获取自定义的过滤字段值
	custFilter = rptfilter.FilterParameter.CustomFilter;
	if(custFilter==None):
		return;
	orgObj=custFilter["F_BGP_OrgId"];#获取组织
	whereOrgs="";
	if(orgObj<>None):
		orgId=("{0}").format(orgObj["Id"]);#组织ID
		whereOrgs=(" and t1.FPURORGID = {0} ").format(orgId);#选择了组织，拼接组织过滤
	materials=custFilter["F_BGP_Material"];#物料多选过滤
	matList=List[str]();
	if(materials<>None):
		for m in materials:
			materialNum="'"+str(m["F_BGP_Material"]["Number"])+"'";#取出过滤框选择的多个物料编码
			matList.Add(materialNum);
	whereMat = "";
	if(matList.Count>0):
		whereMat=(" and t2m.FNumber in ({0})").format(str.Join(",",matList));#拼接物料多选过滤
	beginDate=str(custFilter["F_BGP_StartDate"]);#获取开始日期
	EndDate=str(custFilter["F_BGP_EndDate"]);#获取结束日期
	#注意!!!: 最终临时表一定要有FIDENTITYID ，要从1开始，且不重复 ，不断号，不然前台显示空白!!!!
	sql=("""/*dialect*/select row_Number() Over(order by t2.FMATERIALID) as FIDENTITYID,2 as FPRECISION
,max(t2m.fnumber) as materialNumber,max(t2m_L.fname) as materialName --物料编码，物料名称
,sum(t2.FMUSTQTY) as FMUSTQTY,sum(t2.FEXTAUXUNITQTY) as sQty --收料通知单实收数量,收料通知单实收数量(辅单位)
,sum(isnull(t4.FEXTAUXUNITQTY,0)) as FEXTAUXUNITQTY,sum(isnull(t4.FREALQTY,0)) as FREALQTY --采购入库单实收数量(辅单位)，采购入库单实收数量
,sum(t2.FMUSTQTY - isnull(t4.FREALQTY,0)) as unInstockQty --未入库数量
,sum(t5.FBASEQTY) as invertoryQty --库存数量
,max(t2s.fnumber) as stockNumber ,max(t2s_L.fname) as stockName --仓库编码，仓库名称
,max(t6.FNUMBER) as lotNumber --批号
into {0} 
from T_PUR_Receive t1 --收料通知单单据头
join T_PUR_ReceiveEntry t2 on t1.fid = t2.fid --收料通知单单据体明细
join t_BD_Stock t2s on t2.FSTOCKID = t2s.FStockId --仓库
join t_BD_Stock_L t2s_L on t2.FSTOCKID = t2s_L.FStockId and t2s_L.FLOCALEID=2052 --仓库多语言
join T_BD_MATERIAL t2m on t2.FMATERIALID = t2m.FMATERIALID --收料通知单对应物料
join T_BD_MATERIAL_L t2m_L on t2m.FMATERIALID = t2m_L.FMATERIALID and t2m_L.FLOCALEID=2052 --收料通知单对应物料多语言
left join T_STK_INSTOCKENTRY_LK t3 on t3.FSTABLENAME = 'T_PUR_ReceiveEntry' and t3.FSBILLID = t2.fid and t3.fsid = t2.fentryid --采购入库单关联收料通知单
left join T_STK_INSTOCKENTRY t4 on t3.fentryid = t4.fentryid --采购入库单
left join T_STK_INVENTORY t5 on t2.FLOT = t5.FLOT and t5.FMATERIALID = t2m.FMasterId and t5.FSTOCKID = t2.FSTOCKID and t5.FSTOCKORGID = t1.FSTOCKORGID --即时库存
left join T_BD_LOTMASTER t6 on t5.FLOT = t6.FLOTID --批号主档
where 1=1 {1} and t1.FDATE>='{2}' and t1.FDATE<='{3}' {4}
group by t2.FMATERIALID,t2.FLOT,t2.FSTOCKID,t1.FSTOCKORGID""").format(tableName,whereOrgs,beginDate,EndDate,whereMat);
  	#raise Exception(sql);#可以通过此方法弹出Sql语句进行调试验证
	DBUtils.Execute(this.Context,sql);#执行SQL，将报表数据写入临时表

#构建账表列头
def GetReportHeaders(Filter):
	header=ReportHeader();
	localEid=this.Context.UserLocale.LCID;#获取当前语言环境代码,中文为2052
	#header.AddChild("fdate",LocaleValue("收料通知单日期",localEid));#字段名,列头标题,字段名与临时表中的字段名保持对应，相当于每一个列头对应临时表的哪个字段
	#header.AddChild("fbillno",LocaleValue("收料通知单单据编号",localEid));
	header.AddChild("materialNumber",LocaleValue("物料编码",localEid));
	header.AddChild("materialName",LocaleValue("物料名称",localEid));
	header.AddChild("stockNumber",LocaleValue("仓库编码",localEid));
	header.AddChild("stockName",LocaleValue("仓库名称",localEid));
	header.AddChild("lotNumber",LocaleValue("批号",localEid));
	header.AddChild("invertoryQty",LocaleValue("库存数量",localEid),SqlStorageType.SqlDecimal);
	header.AddChild("FMUSTQTY",LocaleValue("收料通知单实收数量",localEid),SqlStorageType.SqlDecimal);
	#header.AddChild("sQty",LocaleValue("收料通知单实收数量(辅单位)",localEid),SqlStorageType.SqlDecimal);
	#header.AddChild("FEXTAUXUNITQTY",LocaleValue("采购入库单实收数量(辅单位)",localEid),SqlStorageType.SqlDecimal);
	header.AddChild("FREALQTY",LocaleValue("采购入库单实收数量",localEid),SqlStorageType.SqlDecimal);
	header.AddChild("unInstockQty",LocaleValue("未入库数量",localEid),SqlStorageType.SqlDecimal);
	return header;

#设置报表表头字段值
#这里主要是把过滤框设置的字段值，显示到报表表头
def GetReportTitles(Filter):
	reportTitles=ReportTitles();
	custFilter=Filter.FilterParameter.CustomFilter;#获取过滤框的数据包
	orgObj=custFilter["F_BGP_OrgId"];#获取组织
	beginDate=str(custFilter["F_BGP_StartDate"]);#获取开始日期
	EndDate=str(custFilter["F_BGP_EndDate"]);#获取结束日期
	if(orgObj<>None):
		reportTitles.AddTitle("F_BGP_OrgId", orgObj["Name"]);
	reportTitles.AddTitle("F_BGP_StartDate", beginDate);
	reportTitles.AddTitle("F_BGP_EndDate", EndDate);
	return reportTitles;

#设置汇总行
def GetSummaryColumnInfo(rptfilter):
	result=List[SummaryField]();
	result.Add(SummaryField("FMUSTQTY",BOSEnums.Enu_SummaryType.SUM));
	#result.Add(SummaryField("sQty",BOSEnums.Enu_SummaryType.SUM));
	#result.Add(SummaryField("FEXTAUXUNITQTY",BOSEnums.Enu_SummaryType.SUM));
	result.Add(SummaryField("FREALQTY",BOSEnums.Enu_SummaryType.SUM));
	result.Add(SummaryField("unInstockQty",BOSEnums.Enu_SummaryType.SUM));
	result.Add(SummaryField("invertoryQty",BOSEnums.Enu_SummaryType.SUM));
	return result;
	
#报表关闭触发，通常在此处清理报表过程产生的临时表
def CloseReport():
	this.DropTempTable();
